This is a set of Perl scripts for administering a
Postgres installation


Wolfgang Richter
August 2014
==================================================================

-----------
Assumptions
-----------
-  A version of Perl is installed at /usr/bin/perl
-  Your set of scripts are being installed into a subdirectory
   "maint" off the home directory under the postgres instance
   account such as /var/lib/pgsql/maint

----------
To install
----------

To install this set of scripts:
-  Unzip/untar the directory of files to a "maint" subdirectory on your
   server such as /var/lib/pgsql/maint with commands like this under
   the home directory of the postgres instance account:
     tar -zxvf postgres_maint_20140828.tar.gz
     mv postgres_maint_20140828 maint

   (This particular was prepared from a set of working scripts on our
   test Postgres server by me issuing the following commands:
     mv maint postgres_maint_20140828
     tar -zcvf postgres_maint_20140828.tar.gz postgres_maint_20140828
     mv postgres_maint_20140828 maint

-  Modify the "global.pl" file which contains Perl global variables
   used by the scripts. In particular specify correct path names
   and the list of people to receive e-mail notifications from
   the maintenance scripts.

-  Modify the global variables in the emailtester.pl script as it
   is a standalone script

-  Modify the cron schedule file "cronsched_postgres.txt"
   which contains a sample schedule for running a suite of
   maintenance procedures.

-  View and modify any script file path names for batch file jobs
   in the maint/batchjob directory.

-  Compare (and modify) the postgresql.conf file on your server
   (typically located in /data/dbdata/postgresql.conf) with the sample
   configuration file postgresql_sample.conf to ensure that the scripts
   will work with it. Sample command to do a comparison:
     diff postgresql_sample.conf /data/dbdata/postgresql.conf|more

--------------------------
Maintenance subdirectories
--------------------------

The following are maintenance subdirectories with a special purpose
-------------------------------------------------------------------

batchjob
-  Batch scripts that are executed by cron. Make sure the paths in
   the scripts being executed are correct for your installation.

conf
-  Configuration files for the maintenance scripts
   Currently just contains the file downtime.conf that you can
   configure to schedule an upcoming date/time interval during
   which cron jobs are to not execute. **THIS NEEDS TO BE TESTED**

sql
-  Collect useful sample SQL commands here as you see fit


The following subdirectories used internally by the maintenance
---------------------------------------------------------------

**NOTE: for a new install these directories should be empty**

cronlog
-  Location of any error or standard output generated by maintenance
   programs running in a cron schedule

logmaint
-  Location for log files generated/used by maintenance programs

temp
-  Location for temporary files generated/used by maintenance programs


---------
Key files
---------

cronsched_postgres.txt
-  Contains a cron schedule for this server. To activate it:
     crontab -r
     crontab cronsched_postgres.txt

global.pl
-  Global variables used by Perl scripts for this server.
   This is the main file that gets modified for any particular
   new installation.

-------------------
Maintenance Scripts
-------------------

The following are maintenance scripts located in the "maint"
directory that you will execute via a cron schedule (see above
for an example).

Check that the Postgres server up
---------------------------------
Files: up.pl, upcheck.pl
-  These 2 scripts work in tandem. The up.pl script checks the
   status of the Postgres server to see that it is up and writes
   status info to a special internal file.
   The upcheck.pl script runs a minute later and checks the contents
   of the up status info file and sends an e-mail alert if there
   is an apparent issue.

Check that cron jobs and email notification working
---------------------------------------------------
File: emailtester.pl
-  This is a basic script to send an e-mail with a subject heading.
   It is recommended to execute it twice per day, say at 3 am and 3 pm.
   I set up a filter on SFU Connect, called EmailCheckUnix with this
   specification:
     Subject
     matches wildcard condition
     ==CHECK TO SEE THAT EMAIL IS WORKING== *

   In my case I have this set up on 18 servers, so I look to see that
   there is a multiple of 18 e-mails in the filter to confirm that
   all my database servers that I monitor like this are running their
   cron jobs and e-mail notification is working

Do every 15 minutes
-------------------
File: batchjob/15min.sh
-  Execute the following scripts
   -  Check Postgres server log file for any new errors/warnings
         File: logcheck.pl
   -  Check cron job log for any errors/warnings
         File: checkcronlog.pl
   -  Check disk space availability
         File: checkdisk.pl

Do nightly
----------
File: batchjob/nightly.sh
-  Execute the following scripts
   -  Delete older files in assorted directories -- keeping x number of them
         File: keepfiles.pl
   -  Start Postgres Backup mode (generate checkpoint info and archive it to
      archive log)
         File: backup_start.pl
   -  Copy/compress database files to backup location
         File: backupfiles.pl
   -  Terminate Postgres Backup mode (starts next WAL segment and archives
      last one)
         File: backup_stop.pl

Do hourly
---------
File: batchjob/hourly.sh
-  Execute the following scripts
   -  Delete older files in assorted directories when more than x days old
         File: deloldfiles.pl

--------------------
Other Useful Scripts
--------------------

The following are other possibly useful scripts available to be
modified/used:

Files: testsend.pl testsend.sh  testsend.txt
-  Test scripts for sending notification messages
   (Handy tool to check that the e-mail notification used in the maintenance
   scripts will work on your server -- before relying on them)

File: compare.pl
-  Compare files (using diff) in one directory with those in another --
   ignoring any that have .bak or .old as suffix.
   (Handy tool to merging/comparing these scripts being used on one server
   with another)

File: wait.pl
-  On occasion one is working on a server that disconnect automatically after
   just a shortwhile of perceived inactivity.
   Run this script in the background to generate activity artificially as it
   simply outputs a "ping" every 60 seconds.

